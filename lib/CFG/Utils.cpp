#include <capstone/x86.h>          // for x86_reg, x86_op_type, cs_x86_op
#include <ctype.h>                 // for isxdigit
#include <cxxabi.h>                // for __cxa_demangle, abi
#include <stdio.h>                 // for printf
#include <cstdint>                 // for uint32_t, uint64_t
#include <cstdlib>                 // for strtol, exit, NULL, size_t
#include <filesystem>              // for path, create_directories, exists
#include <fstream>                 // for basic_ofstream, basic_ostream, endl
#include <string>                  // for allocator, char_traits, operator+
#include "CFG/Utils.h"             // for dec_to_hex, cs_x86_op_to_string
#include "Fig/panic.hpp"           // for FIG_PANIC
#include "nlohmann/json_fwd.hpp"   // for json

namespace fs = std::filesystem;

uint32_t CFG::getUniqueID() {
    static uint32_t libCFGUniqueID = 1;
    return libCFGUniqueID++;
}

bool CFG::isHexadecimal(const std::string &str) {
    if(str.empty())
        return false;

    if(str.size() < 2 || (str[0] != '0' || (str[1] != 'x' && str[1] != 'X')))
        return false;

    for(size_t i = 2; i < str.size(); ++i) {
        if(!isxdigit(static_cast<unsigned char>(str[i]))) {
            return false;
        }
    }

    return true;
}

uint64_t CFG::hexStringToUInt(const std::string &hexStr) {
    if(!CFG::isHexadecimal(hexStr))
        FIG_PANIC("\"", hexStr, "\"", " is not a HEX number");

    return std::strtol(hexStr.c_str() + 2, nullptr, 16);
}

void CFG::json_to_file(nlohmann::json &njson, std::string path) {
    fs::path pathObj   = fs::path(path);
    fs::path directory = pathObj.parent_path();
    if(!fs::exists(directory)) {
        fs::create_directories(directory);
    }
    std::ofstream os(pathObj);
    if(!os.is_open())
        FIG_PANIC("No File!");
    os << njson.dump(2) << std::endl;
    os.close();
}

std::string CFG::cs_x86_op_to_string(cs_x86_op op) {
    std::string res;
    switch(op.type) {
    case X86_OP_REG: res = res + CFG::x86_reg_to_string(op.reg); break;
    case X86_OP_IMM: res = res + "0X" + CFG::dec_to_hex(op.imm); break;
    case X86_OP_MEM: res = res + CFG::x86_op_mem_to_string(op.mem); break;
    case X86_OP_INVALID: res = res + "INVALID"; break;
    }
    res = res + "@" + std::to_string(op.size);
    return res;
}

std::string CFG::get_demangled_name(const std::string &name) {
    int status;
    std::string demangled_name;
    char *cxa_demangled_name = abi::__cxa_demangle(name.c_str(), nullptr, 0, &status);
    if(status != 0) {
        demangled_name = name;
    } else {
        demangled_name = std::string(cxa_demangled_name);
    }

    free(cxa_demangled_name);

    return demangled_name;
}

const char *CFG::x86_op_type_to_string(x86_op_type type) {
    switch(type) {
    case X86_OP_INVALID: return "X86_OP_INVALID";
    case X86_OP_REG: return "X86_OP_REG";
    case X86_OP_IMM: return "X86_OP_IMM";
    case X86_OP_MEM: return "X86_OP_MEM";
    default: FIG_PANIC("unexpected error!");
    }
}

std::string CFG::x86_op_mem_to_string(x86_op_mem mem) {
    std::string res;
    if(mem.segment != X86_REG_INVALID)
        res = res + CFG::x86_reg_to_string(mem.segment) + ":";
    if(mem.base != X86_REG_INVALID)
        res = res + CFG::x86_reg_to_string(mem.base);
    if(mem.index != X86_REG_INVALID) {
        if(mem.scale >= 0)
            res = res + "+" + CFG::x86_reg_to_string(mem.index) + "*" + std::to_string(mem.scale);
        else
            res = res + "-" + CFG::x86_reg_to_string(mem.index) + "*" + std::to_string(-mem.scale);
    }
    if(mem.disp != 0) {
        if(mem.disp > 0)
            res = res + "+0x" + dec_to_hex(mem.disp);
        else
            res = res + "-0x" + dec_to_hex(-mem.disp);
    }
    return "MEM[" + res + "]";
}

const char *CFG::x86_reg_to_string(x86_reg reg) {
#define CASE_RETURN_X86_REG_STRING(reg) \
    case reg: return #reg;

    switch(reg) {
        CASE_RETURN_X86_REG_STRING(X86_REG_INVALID)
        CASE_RETURN_X86_REG_STRING(X86_REG_AH)
        CASE_RETURN_X86_REG_STRING(X86_REG_AL)
        CASE_RETURN_X86_REG_STRING(X86_REG_AX)
        CASE_RETURN_X86_REG_STRING(X86_REG_BH)
        CASE_RETURN_X86_REG_STRING(X86_REG_BL)
        CASE_RETURN_X86_REG_STRING(X86_REG_BP)
        CASE_RETURN_X86_REG_STRING(X86_REG_BPL)
        CASE_RETURN_X86_REG_STRING(X86_REG_BX)
        CASE_RETURN_X86_REG_STRING(X86_REG_CH)
        CASE_RETURN_X86_REG_STRING(X86_REG_CL)
        CASE_RETURN_X86_REG_STRING(X86_REG_CS)
        CASE_RETURN_X86_REG_STRING(X86_REG_CX)
        CASE_RETURN_X86_REG_STRING(X86_REG_DH)
        CASE_RETURN_X86_REG_STRING(X86_REG_DI)
        CASE_RETURN_X86_REG_STRING(X86_REG_DIL)
        CASE_RETURN_X86_REG_STRING(X86_REG_DL)
        CASE_RETURN_X86_REG_STRING(X86_REG_DS)
        CASE_RETURN_X86_REG_STRING(X86_REG_DX)
        CASE_RETURN_X86_REG_STRING(X86_REG_EAX)
        CASE_RETURN_X86_REG_STRING(X86_REG_EBP)
        CASE_RETURN_X86_REG_STRING(X86_REG_EBX)
        CASE_RETURN_X86_REG_STRING(X86_REG_ECX)
        CASE_RETURN_X86_REG_STRING(X86_REG_EDI)
        CASE_RETURN_X86_REG_STRING(X86_REG_EDX)
        CASE_RETURN_X86_REG_STRING(X86_REG_EFLAGS)
        CASE_RETURN_X86_REG_STRING(X86_REG_EIP)
        CASE_RETURN_X86_REG_STRING(X86_REG_EIZ)
        CASE_RETURN_X86_REG_STRING(X86_REG_ES)
        CASE_RETURN_X86_REG_STRING(X86_REG_ESI)
        CASE_RETURN_X86_REG_STRING(X86_REG_ESP)
        CASE_RETURN_X86_REG_STRING(X86_REG_FPSW)
        CASE_RETURN_X86_REG_STRING(X86_REG_FS)
        CASE_RETURN_X86_REG_STRING(X86_REG_GS)
        CASE_RETURN_X86_REG_STRING(X86_REG_IP)
        CASE_RETURN_X86_REG_STRING(X86_REG_RAX)
        CASE_RETURN_X86_REG_STRING(X86_REG_RBP)
        CASE_RETURN_X86_REG_STRING(X86_REG_RBX)
        CASE_RETURN_X86_REG_STRING(X86_REG_RCX)
        CASE_RETURN_X86_REG_STRING(X86_REG_RDI)
        CASE_RETURN_X86_REG_STRING(X86_REG_RDX)
        CASE_RETURN_X86_REG_STRING(X86_REG_RIP)
        CASE_RETURN_X86_REG_STRING(X86_REG_RIZ)
        CASE_RETURN_X86_REG_STRING(X86_REG_RSI)
        CASE_RETURN_X86_REG_STRING(X86_REG_RSP)
        CASE_RETURN_X86_REG_STRING(X86_REG_SI)
        CASE_RETURN_X86_REG_STRING(X86_REG_SIL)
        CASE_RETURN_X86_REG_STRING(X86_REG_SP)
        CASE_RETURN_X86_REG_STRING(X86_REG_SPL)
        CASE_RETURN_X86_REG_STRING(X86_REG_SS)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR0)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR1)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR2)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR3)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR4)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR5)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR6)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR7)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR8)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR9)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR10)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR11)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR12)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR13)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR14)
        CASE_RETURN_X86_REG_STRING(X86_REG_CR15)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR0)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR1)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR2)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR3)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR4)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR5)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR6)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR7)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR8)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR9)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR10)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR11)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR12)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR13)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR14)
        CASE_RETURN_X86_REG_STRING(X86_REG_DR15)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP0)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP1)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP2)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP3)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP4)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP5)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP6)
        CASE_RETURN_X86_REG_STRING(X86_REG_FP7)
        CASE_RETURN_X86_REG_STRING(X86_REG_K0)
        CASE_RETURN_X86_REG_STRING(X86_REG_K1)
        CASE_RETURN_X86_REG_STRING(X86_REG_K2)
        CASE_RETURN_X86_REG_STRING(X86_REG_K3)
        CASE_RETURN_X86_REG_STRING(X86_REG_K4)
        CASE_RETURN_X86_REG_STRING(X86_REG_K5)
        CASE_RETURN_X86_REG_STRING(X86_REG_K6)
        CASE_RETURN_X86_REG_STRING(X86_REG_K7)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM0)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM1)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM2)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM3)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM4)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM5)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM6)
        CASE_RETURN_X86_REG_STRING(X86_REG_MM7)
        CASE_RETURN_X86_REG_STRING(X86_REG_R8)
        CASE_RETURN_X86_REG_STRING(X86_REG_R9)
        CASE_RETURN_X86_REG_STRING(X86_REG_R10)
        CASE_RETURN_X86_REG_STRING(X86_REG_R11)
        CASE_RETURN_X86_REG_STRING(X86_REG_R12)
        CASE_RETURN_X86_REG_STRING(X86_REG_R13)
        CASE_RETURN_X86_REG_STRING(X86_REG_R14)
        CASE_RETURN_X86_REG_STRING(X86_REG_R15)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST0)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST1)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST2)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST3)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST4)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST5)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST6)
        CASE_RETURN_X86_REG_STRING(X86_REG_ST7)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM0)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM1)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM2)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM3)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM4)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM5)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM6)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM7)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM8)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM9)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM10)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM11)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM12)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM13)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM14)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM15)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM16)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM17)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM18)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM19)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM20)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM21)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM22)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM23)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM24)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM25)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM26)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM27)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM28)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM29)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM30)
        CASE_RETURN_X86_REG_STRING(X86_REG_XMM31)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM0)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM1)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM2)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM3)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM4)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM5)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM6)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM7)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM8)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM9)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM10)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM11)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM12)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM13)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM14)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM15)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM16)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM17)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM18)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM19)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM20)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM21)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM22)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM23)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM24)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM25)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM26)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM27)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM28)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM29)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM30)
        CASE_RETURN_X86_REG_STRING(X86_REG_YMM31)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM0)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM1)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM2)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM3)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM4)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM5)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM6)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM7)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM8)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM9)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM10)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM11)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM12)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM13)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM14)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM15)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM16)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM17)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM18)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM19)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM20)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM21)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM22)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM23)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM24)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM25)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM26)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM27)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM28)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM29)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM30)
        CASE_RETURN_X86_REG_STRING(X86_REG_ZMM31)
        CASE_RETURN_X86_REG_STRING(X86_REG_R8B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R9B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R10B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R11B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R12B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R13B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R14B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R15B)
        CASE_RETURN_X86_REG_STRING(X86_REG_R8D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R9D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R10D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R11D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R12D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R13D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R14D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R15D)
        CASE_RETURN_X86_REG_STRING(X86_REG_R8W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R9W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R10W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R11W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R12W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R13W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R14W)
        CASE_RETURN_X86_REG_STRING(X86_REG_R15W)
        CASE_RETURN_X86_REG_STRING(X86_REG_BND0)
        CASE_RETURN_X86_REG_STRING(X86_REG_BND1)
        CASE_RETURN_X86_REG_STRING(X86_REG_BND2)
        CASE_RETURN_X86_REG_STRING(X86_REG_BND3)
    default: FIG_PANIC("Unexpected reg:", (uint64_t)reg);
    }
#undef CASE_RETURN_X86_REG_STRING
}